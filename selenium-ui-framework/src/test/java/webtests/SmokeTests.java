package webtests;

/**
 * @author Suma Kondapaneni
 * @created 13 Jul 2025
 */



import base.TestBase;

import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;
import pages.HomePage;
import pages.ReservationPage;
import pages.BookingPage;
import pages.AdminLoginPage;
import pages.RoomManagementPage;
import utils.ConfigReader;

import static org.testng.Assert.*;

import java.text.ParseException;

@Listeners(utils.ScreenshotListener.class)
public class SmokeTests extends TestBase {
	
	
	private String user="";
	private String pass ="";
	
	@BeforeClass 
	
	public void getConfig() {
		
		user = ConfigReader.get("admin.user");
		pass= ConfigReader.get("admin.password");
		
	}
	
	 @BeforeMethod(alwaysRun = true)
	    public void setupRoomBeforeBooking() {
	       HomePage home = new HomePage(getDriver());

	        // Admin login
	        AdminLoginPage loginPage = home.clickAdmin();
	        RoomManagementPage roomPage = loginPage.login(user,pass );

	        // Create a basic room
	        roomPage.createRoom(
	            "500",
	            "Single",
	            true,
	            100,
	            "Autogenerated test room",
	            new String[] { "WiFi", "Safe" }
	        );

	        // Return to homepage
	        home = roomPage.clickFrontPage();
	    }
	
	

    /**
     * 1. Verify end-to-end booking flow for a valid customer
     */
    @Test(priority = 1, description = "Customer can search, select room, and complete a booking successfully")
    public void testSuccessfulBookingFlow() throws Exception {
        HomePage homePage = new HomePage(getDriver());
        homePage.checkAvailability("2025-08-01", "2025-08-05");

        assertFalse(homePage.isNoRoomsAvailable(), "Expected available rooms");

        ReservationPage reservationPage = homePage.clickFirstRoomImage();
        BookingPage bookingPage = reservationPage.clickReserve();

        bookingPage.createBooking("Alice", "Brown", "alice@example.com", "01234567890");

        
    }
    


    /**
     * 2. Ensure validation messages appear for invalid booking form input
     */
    @Test(priority = 2, description = "Booking form shows validation messages on empty submission")
    public void testBookingFormValidationMessages() {
        HomePage homePage = new HomePage(getDriver());
        
        try {
			homePage.checkAvailability("2025-08-01", "2025-08-05");
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

        ReservationPage reservationPage = homePage.clickFirstRoomImage();
        BookingPage bookingPage = reservationPage.clickReserve();

        bookingPage.clickSubmitWithoutFilling();

        assertTrue(bookingPage.isValidationMessageDisplayed("Firstname should not be blank"), "Expected 'Firstname is required' message");
        assertTrue(bookingPage.isValidationMessageDisplayed("Lastname should not be blank"), "Expected 'Lastname is required' message");
        //TO-DO validate other error messages as well
    }

    /**
     * 4. Validate  when no rooms are available
     */
    @Test(priority = 3, description = "Displays 'No rooms available' for invalid date range")
    public void testNoRoomsAvailableScenario() throws Exception {  //valid bug
        HomePage homePage = new HomePage(getDriver());
        homePage.checkAvailability("2020-01-01", "2020-01-05");

        assertTrue(homePage.isNoRoomsAvailable(), "Expected 'No rooms available' message");
        assertTrue(homePage.isSearchStatePreserved(), "Search input state should be preserved");
    }

   

    
}


